#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞–∫–µ—Ç–∞ kgrv.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –ø–∞–∫–µ—Ç–∞ kgrv.
"""

import sys
import os
import argparse
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É kgrv –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

try:
    from kgrv import About, __version__
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç kgrv")
    sys.exit(1)


def create_parser():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
    
    Returns:
        argparse.ArgumentParser: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    """
    parser = argparse.ArgumentParser(
        description="CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞–∫–µ—Ç–∞ kgrv",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python cli.py info                    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ
  python cli.py info --name "John"      # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è John
  python cli.py skills                  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–≤—ã–∫–∏
  python cli.py projects                # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã
  python cli.py json                    # –í—ã–≤–µ—Å—Ç–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
  python cli.py --version               # –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –ø–∞–∫–µ—Ç–∞
        """
    )
    
    parser.add_argument(
        '--version', 
        action='version', 
        version=f'kgrv {__version__}'
    )
    
    parser.add_argument(
        '--name', 
        type=str, 
        default='kogriv',
        help='–ò–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: kogriv)'
    )
    
    parser.add_argument(
        '--output', 
        choices=['text', 'json'],
        default='text',
        help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: text)'
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ info
    info_parser = subparsers.add_parser('info', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
    info_parser.add_argument(
        '--add-skill', 
        action='append',
        help='–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–≤—ã–∫'
    )
    info_parser.add_argument(
        '--add-project', 
        action='append',
        help='–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ skills
    subparsers.add_parser('skills', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–≤—ã–∫–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ projects
    subparsers.add_parser('projects', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ json
    subparsers.add_parser('json', help='–í—ã–≤–µ—Å—Ç–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')
    
    return parser


def handle_info_command(args, about):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É info.
    
    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        about: –û–±—ä–µ–∫—Ç About
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if args.add_skill:
        for skill in args.add_skill:
            about.add_skill(skill)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if args.add_project:
        for project in args.add_project:
            about.add_project(project)
    
    if args.output == 'json':
        print(json.dumps(about.get_info(), ensure_ascii=False, indent=2))
    else:
        about.print_info()


def handle_skills_command(args, about):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É skills.
    
    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        about: –û–±—ä–µ–∫—Ç About
    """
    skills = about.get_skills()
    
    if args.output == 'json':
        print(json.dumps({"skills": skills}, ensure_ascii=False, indent=2))
    else:
        print(f"üõ†Ô∏è –ù–∞–≤—ã–∫–∏ {about.name}:")
        for skill in skills:
            print(f"  ‚Ä¢ {skill}")


def handle_projects_command(args, about):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É projects.
    
    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        about: –û–±—ä–µ–∫—Ç About
    """
    projects = about.get_projects()
    
    if args.output == 'json':
        print(json.dumps({"projects": projects}, ensure_ascii=False, indent=2))
    else:
        print(f"üìÇ –ü—Ä–æ–µ–∫—Ç—ã {about.name}:")
        for project in projects:
            print(f"  ‚Ä¢ {project}")


def handle_json_command(args, about):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É json.
    
    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        about: –û–±—ä–µ–∫—Ç About
    """
    print(json.dumps(about.get_info(), ensure_ascii=False, indent=2))


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI.
    """
    parser = create_parser()
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
    if not args.command:
        parser.print_help()
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç About
    about = About(args.name)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if args.command == 'info':
        handle_info_command(args, about)
    elif args.command == 'skills':
        handle_skills_command(args, about)
    elif args.command == 'projects':
        handle_projects_command(args, about)
    elif args.command == 'json':
        handle_json_command(args, about)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
        parser.print_help()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
